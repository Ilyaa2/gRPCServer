package domain

import (
	"bufio"
	"os"
	"path"
	"strconv"
	"strings"
)

type AbsenceOptions struct {
	reasons map[int]Reason
}

type Reason struct {
	Description string
	Emoji       string
}

// TODO –∏—Å–ø—Ä–∞–≤–∏—Ç—å
const dirPath = "C:\\Users\\User\\GolandProjects\\gRPCServer\\internal\\domain\\static"

func NewAbsenceOptions(filename string) (*AbsenceOptions, error) {
	//todo
	return phonyParse(filename)
}

func (a *AbsenceOptions) GetReason(i int) (Reason, bool) {
	r, ok := a.reasons[i]
	return r, ok
}

func phonyParse(filename string) (*AbsenceOptions, error) {
	return &AbsenceOptions{
		reasons: map[int]Reason{
			1:  {"–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", "(üè†)"},
			2:  {"–ì–æ—Å—Ç–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫", ""},
			3:  {"–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "(‚úà)"},
			4:  {"–ú–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "(‚úà)"},
			5:  {"–ë–æ–ª–µ–∑–Ω—å", "(üå°)"},
			6:  {"–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç", "(üå°)"},
			7:  {"–ù–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", ""},
			8:  {"–î–µ–∂—É—Ä—Å—Ç–≤–æ", ""},
			9:  {"–£—á–µ–±–∞", "(üéì)"},
			10: {"–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "(üè†)"},
			11: {"–û—Ç–ø—É—Å–∫", "(‚òÄ)"},
			12: {"–û—Ç–ø—É—Å–∫ –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç", "(‚òÄ)"},
			13: {"–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π", "(‚òÄ)"},
		},
	}, nil
}

// todo –°–î–ï–õ–ê–¢–¨ –≠–¢–û
// "7 –ù–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã" - –Ω–µ–∫–æ—Ä—Ä–µ—Ç–Ω–æ //"8 –î–µ–∂—É—Ä—Å—Ç–≤–æ" - –æ—à–∏–±–∫–∞.
func parseAbsenceOptionsFile(filename string) (*AbsenceOptions, error) {
	m := map[int]Reason{}
	file, err := os.Open(path.Join(dirPath, filename))
	defer file.Close()
	if err != nil {
		return nil, err
	}

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		str := scanner.Text()
		position1 := strings.Index(str, " ")
		position2 := strings.LastIndex(str, " ")
		idx, err := strconv.Atoi(str[:position1])
		if err != nil {
			return nil, err
		}
		description := str[position1+1 : position2]
		emoji := str[position2:]
		m[idx] = Reason{
			Description: description,
			Emoji:       emoji,
		}
	}

	if err = scanner.Err(); err != nil {
		return nil, err
	}

	return &AbsenceOptions{reasons: m}, nil
}
