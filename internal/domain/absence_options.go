package domain

// AbsenceOptions used to decode the id of the reason into Emoji and Description
type AbsenceOptions struct {
	reasons map[int]Reason
}

type Reason struct {
	Description string
	Emoji       string
}

func NewAbsenceOptions() *AbsenceOptions {
	return initOptions()
}

func (a *AbsenceOptions) GetReason(i int) (Reason, bool) {
	r, ok := a.reasons[i]
	return r, ok
}

func initOptions() *AbsenceOptions {
	return &AbsenceOptions{
		reasons: map[int]Reason{
			1:  {"–õ–∏—á–Ω—ã–µ –¥–µ–ª–∞", "(üè†)"},
			2:  {"–ì–æ—Å—Ç–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫", ""},
			3:  {"–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "(‚úà)"},
			4:  {"–ú–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞", "(‚úà)"},
			5:  {"–ë–æ–ª–µ–∑–Ω—å", "(üå°)"},
			6:  {"–ë–æ–ª—å–Ω–∏—á–Ω—ã–π –ª–∏—Å—Ç", "(üå°)"},
			7:  {"–ù–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", ""},
			8:  {"–î–µ–∂—É—Ä—Å—Ç–≤–æ", ""},
			9:  {"–£—á–µ–±–∞", "(üéì)"},
			10: {"–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "(üè†)"},
			11: {"–û—Ç–ø—É—Å–∫", "(‚òÄ)"},
			12: {"–û—Ç–ø—É—Å–∫ –∑–∞ —Å–≤–æ–π —Å—á–µ—Ç", "(‚òÄ)"},
			13: {"–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å –æ—Ç—Ä–∞–±–æ—Ç–∫–æ–π", "(‚òÄ)"},
		},
	}
}
