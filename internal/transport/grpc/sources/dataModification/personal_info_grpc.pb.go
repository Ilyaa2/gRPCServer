// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: personal_info.proto

package dataModification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PersonalInfo_GetReasonOfAbsence_FullMethodName = "/dataModification.PersonalInfo/getReasonOfAbsence"
)

// PersonalInfoClient is the client API for PersonalInfo sources.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalInfoClient interface {
	GetReasonOfAbsence(ctx context.Context, in *ContactDetails, opts ...grpc.CallOption) (*ContactDetails, error)
}

type personalInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalInfoClient(cc grpc.ClientConnInterface) PersonalInfoClient {
	return &personalInfoClient{cc}
}

func (c *personalInfoClient) GetReasonOfAbsence(ctx context.Context, in *ContactDetails, opts ...grpc.CallOption) (*ContactDetails, error) {
	out := new(ContactDetails)
	err := c.cc.Invoke(ctx, PersonalInfo_GetReasonOfAbsence_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalInfoServer is the server API for PersonalInfo sources.
// All implementations must embed UnimplementedPersonalInfoServer
// for forward compatibility
type PersonalInfoServer interface {
	GetReasonOfAbsence(context.Context, *ContactDetails) (*ContactDetails, error)
	mustEmbedUnimplementedPersonalInfoServer()
}

// UnimplementedPersonalInfoServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalInfoServer struct {
}

func (UnimplementedPersonalInfoServer) GetReasonOfAbsence(context.Context, *ContactDetails) (*ContactDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReasonOfAbsence not implemented")
}
func (UnimplementedPersonalInfoServer) mustEmbedUnimplementedPersonalInfoServer() {}

// UnsafePersonalInfoServer may be embedded to opt out of forward compatibility for this sources.
// Use of this interface is not recommended, as added methods to PersonalInfoServer will
// result in compilation errors.
type UnsafePersonalInfoServer interface {
	mustEmbedUnimplementedPersonalInfoServer()
}

func RegisterPersonalInfoServer(s grpc.ServiceRegistrar, srv PersonalInfoServer) {
	s.RegisterService(&PersonalInfo_ServiceDesc, srv)
}

func _PersonalInfo_GetReasonOfAbsence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalInfoServer).GetReasonOfAbsence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PersonalInfo_GetReasonOfAbsence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalInfoServer).GetReasonOfAbsence(ctx, req.(*ContactDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalInfo_ServiceDesc is the grpc.ServiceDesc for PersonalInfo sources.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataModification.PersonalInfo",
	HandlerType: (*PersonalInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getReasonOfAbsence",
			Handler:    _PersonalInfo_GetReasonOfAbsence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personal_info.proto",
}
