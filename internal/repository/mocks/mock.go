// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=mocks/mock.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	domain "gRPCServer/internal/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmployee is a mock of Employee interface.
type MockEmployee struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeMockRecorder
}

// MockEmployeeMockRecorder is the mock recorder for MockEmployee.
type MockEmployeeMockRecorder struct {
	mock *MockEmployee
}

// NewMockEmployee creates a new mock instance.
func NewMockEmployee(ctrl *gomock.Controller) *MockEmployee {
	mock := &MockEmployee{ctrl: ctrl}
	mock.recorder = &MockEmployeeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployee) EXPECT() *MockEmployeeMockRecorder {
	return m.recorder
}

// GetAbsenceReason mocks base method.
func (m *MockEmployee) GetAbsenceReason(ctx context.Context, empData *domain.EmployeeData) (*domain.AbsenceReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAbsenceReason", ctx, empData)
	ret0, _ := ret[0].(*domain.AbsenceReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAbsenceReason indicates an expected call of GetAbsenceReason.
func (mr *MockEmployeeMockRecorder) GetAbsenceReason(ctx, empData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAbsenceReason", reflect.TypeOf((*MockEmployee)(nil).GetAbsenceReason), ctx, empData)
}

// GetByEmail mocks base method.
func (m *MockEmployee) GetByEmail(ctx context.Context, email string) (*domain.EmployeeData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.EmployeeData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockEmployeeMockRecorder) GetByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockEmployee)(nil).GetByEmail), ctx, email)
}
